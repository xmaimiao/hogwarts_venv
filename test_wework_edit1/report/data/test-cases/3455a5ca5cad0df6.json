{
  "uid": "3455a5ca5cad0df6",
  "name": "test_delcontact[data2]",
  "fullName": "test_contact.TestContact#test_delcontact",
  "historyId": "c3d83336240444c8cd58fe738d842310",
  "time": {
    "start": 1596023934932,
    "stop": 1596023966718,
    "duration": 31786
  },
  "status": "broken",
  "statusMessage": "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace": "self = <test_contact.TestContact object at 0x00000201858535C0>, name = '麦苗'\n\n    @pytest.mark.parametrize(\"name\", deldata, ids=delids)\n    def test_delcontact(self,name):\n        # result_after = self.main.goto_main().goto_contactlist().\\\n        #     search_contact().personal_infor(name).person_setting().\\\n        #     contactedit().\\\n        #     contactdelpage().get_contact(name)\n>       result_after = self.main.goto_contactlist().\\\n            search_contact().personal_infor(name).person_setting().\\\n            contactedit().\\\n            contactdelpage().get_contact(name)\n\ntest_contact.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\mainpage.py:15: in goto_contactlist\n    self.webdriver_wait(self.index_ele)\n..\\page\\basepage.py:42: in webdriver_wait\n    WebDriverWait(self.driver, timeout).until(lambda x:x.find_element(*locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ee5fe59f-f665-423d-8cec-ef2778aa539f\")>\nmethod = <function BasePage.webdriver_wait.<locals>.<lambda> at 0x0000020186071048>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky": false,
  "newFailed": false,
  "beforeStages": [
    {
      "name": "_Class__pytest_setup_class",
      "time": {
        "start": 1596023898254,
        "stop": 1596023898254,
        "duration": 0
      },
      "status": "passed",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "attachmentsCount": 0,
      "shouldDisplayMessage": false,
      "stepsCount": 0,
      "hasContent": false
    }
  ],
  "testStage": {
    "status": "broken",
    "statusMessage": "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace": "self = <test_contact.TestContact object at 0x00000201858535C0>, name = '麦苗'\n\n    @pytest.mark.parametrize(\"name\", deldata, ids=delids)\n    def test_delcontact(self,name):\n        # result_after = self.main.goto_main().goto_contactlist().\\\n        #     search_contact().personal_infor(name).person_setting().\\\n        #     contactedit().\\\n        #     contactdelpage().get_contact(name)\n>       result_after = self.main.goto_contactlist().\\\n            search_contact().personal_infor(name).person_setting().\\\n            contactedit().\\\n            contactdelpage().get_contact(name)\n\ntest_contact.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\mainpage.py:15: in goto_contactlist\n    self.webdriver_wait(self.index_ele)\n..\\page\\basepage.py:42: in webdriver_wait\n    WebDriverWait(self.driver, timeout).until(lambda x:x.find_element(*locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ee5fe59f-f665-423d-8cec-ef2778aa539f\")>\nmethod = <function BasePage.webdriver_wait.<locals>.<lambda> at 0x0000020186071048>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps": [],
    "attachments": [
      {
        "uid": "105ba0791737b1cd",
        "name": "log",
        "source": "105ba0791737b1cd.txt",
        "type": "text/plain",
        "size": 132
      },
      {
        "uid": "2ec7480e38eb3613",
        "name": "stderr",
        "source": "2ec7480e38eb3613.txt",
        "type": "text/plain",
        "size": 95
      }
    ],
    "parameters": [],
    "attachmentsCount": 2,
    "shouldDisplayMessage": true,
    "stepsCount": 0,
    "hasContent": true
  },
  "afterStages": [
    {
      "name": "_Class__pytest_setup_class::0",
      "time": {
        "start": 1596023994980,
        "stop": 1596024003214,
        "duration": 8234
      },
      "status": "passed",
      "steps": [],
      "attachments": [],
      "parameters": [],
      "attachmentsCount": 0,
      "shouldDisplayMessage": false,
      "stepsCount": 0,
      "hasContent": false
    }
  ],
  "labels": [
    {
      "name": "suite",
      "value": "test_contact"
    },
    {
      "name": "subSuite",
      "value": "TestContact"
    },
    {
      "name": "host",
      "value": "X8O0ILYDG7L3A0P"
    },
    {
      "name": "thread",
      "value": "50532-MainThread"
    },
    {
      "name": "framework",
      "value": "pytest"
    },
    {
      "name": "language",
      "value": "cpython3"
    },
    {
      "name": "package",
      "value": "test_contact"
    },
    {
      "name": "resultFormat",
      "value": "allure2"
    }
  ],
  "parameters": [
    {
      "name": "name",
      "value": "'麦苗'"
    }
  ],
  "links": [],
  "hidden": true,
  "retry": true,
  "extra": {
    "categories": [],
    "tags": []
  },
  "source": "3455a5ca5cad0df6.json",
  "parameterValues": [
    "'麦苗'"
  ]
}